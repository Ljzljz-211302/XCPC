 考虑构建二分图的一些前置条件：
能够被清晰地转换为两个部分且能够建立关系
两个部分之间能够构成匹配关系，如：一个节点只能匹配一个节点的限制，选了左部的某个节点就不能选右部的某个节点...
考虑使用普通的KM算法还是转换为最大流-最小割理解；求mex时，我们要确定从0开始是否每个点都有匹配，或者给出匹配的具体方案；而要只需确定匹配数时，可转换为网络流建模
有时也可以抽象为求解二分图的最小顶点覆盖，最小路径覆盖，最大独立集(互斥)等问题，但核心还是识别二分图本身，即是否可分为两部分

关于最大流最小割：
这里引一下某篇blog中的话：我们建inf的边意义即在我们强制了不能同时选的两点必在同一个集合（即为一个不选一个选），因为如果它们不在同一个集合中，割的大小就超过了inf，肯定不会成为最小割；建1的边的意义即在如果X中的点不在S中，或者Y中的点不在T中，就会损失一个点，而损失当然越小越好
而对于我们钦定的某个边权w，通常指我们将该点与S划在一起所要付出的代价(参考最大权闭合子图相关问题)，亦或收益

对于拆点：
一般拆成二维，原理与最短路径求法类似，已见过的有(i,t)->(i,t+1)(INF)，(u,t)->(v,t+1)(w)。S和T依照题意连接
